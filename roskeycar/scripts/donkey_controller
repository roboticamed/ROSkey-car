#!/usr/bin/python

import rospy
from geometry_msgs.msg import Twist

import Adafruit_PCA9685


def map_range(x, X_min, X_max, Y_min, Y_max):
    """
    Linear mapping between two ranges of values
    """
    X_range = X_max - X_min
    Y_range = Y_max - Y_min
    XY_ratio = X_range / Y_range

    y = ((x - X_min) / XY_ratio + Y_min) // 1

    return int(y)


class PWMController(object):

    def __init__(self, channel, valueRange, pulseRange):
        """
        Creates a PWM controller

        Parameters
        ----------
        channel : int.
            The PWM channel.

        valueRange : 2-tuple.
            (min, max) interval of the input value.

        pulseRange : 2-tuple.
            (min, max) interval of the output PWM pulse.
        """

        self.__channel = channel
        self.__valueRange = valueRange
        self.__pulseRange = pulseRange

        self.__pwm = Adafruit_PCA9685.PCA9685(address=0x40)
        self.__pwm.set_pwm_freq(60)  # Hz

    def sendPulse(self, value):
        """
        Sends a PWM pulse corresponding to value.

        Parameters
        ----------
        value : float
        """
        off = map_range(value, self.__valueRange[0], self.__valueRange[1],
                        self.__pulseRange[0], self.__pulseRange[1])

        print('sendPulse(): {0} : {1} : {2}'.format(self.__channel,
                                                    value,
                                                    off))
        # self.__pwm.set_pwm(self.__channel, 0, off)
        self.set_servo_pulse(off)

    def set_servo_pulse(self, pulse):
        pulse_length = 1000000    # 1,000,000 us per second
        pulse_length //= 60       # 60 Hz
        print('{0}us per period'.format(pulse_length))
        pulse_length //= 4096     # 12 bits of resolution
        print('{0}us per bit'.format(pulse_length))
        pulse *= 1000
        pulse //= pulse_length
        print('pulse: {0}'.format(pulse))
        self.__pwm.set_pwm(self.__channel, 0, pulse)


class DonkeyController(object):

    def __init__(self):

        self.__subscriber = rospy.Subscriber('/donkey/twist',
                                             Twist,
                                             queue_size=1,
                                             callback=self.onTwistReceived)

        # cfg.STEERING_CHANNEL = 12
        # cfg.THROTTLE_CHANNEL = 13
        # self.__throtleController = PWMController(13,
        #                                          (-1.0, 1.0),
        #                                          (40000, 170000))
        self.__steeringController = PWMController(1,
                                                  (-1.0, 1.0),
                                                  (400, 1700))

    def onTwistReceived(self, twist):

        print('onTwistReceived:')

        # linear and angular velocities
        linear = twist.linear.y
        angular = twist.angular.z

        # TODO: set pwm pulse on the servo according to angular

        # TODO: set pwm pulse on the motor according to linear
        # consider min-max throtle
        linear = max(-1.0, min(1.0, linear))
        angular = max(-1.0, min(1.0, angular))

        # self.__throtleController.sendPulse(linear)
        self.__steeringController.sendPulse(angular)


def main():

    rospy.init_node('donkey_controller')

    DonkeyController()

    rospy.spin()


if __name__ == '__main__':
    main()
